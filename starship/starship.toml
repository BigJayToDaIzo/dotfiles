"$schema" = 'https://starship.rs/config-schema.json'

format = """$os\
	$env_var\
	$hostname\
	$all\
	$sudo\
	$character
"""

add_newline = false

palette = 'custom_dank_af'

[character]
success_symbol = '[ÔÇ§ ](char_success_fg)'
error_symbol = '[ÔÇà ](char_poobie_fg)'
vimcmd_symbol = '[ÓüÖ ](time_fg)'
vimcmd_replace_one_symbol = '[ÓüÖ ](time_fg)'
vimcmd_replace_symbol = '[ÓüÖ ](char_poobie_fg)'
vimcmd_visual_symbol = '[ÓüÖ ](user_fg)'

[palettes.custom_dank_af]
user_fg = '#bc33d8'
clock_fg = '#ffa75d'
time_fg = '#fcf77c'
char_success_fg = '#07be61'
char_poobie_fg = '#be0c07'
directory_fg = '#f089fc'
package_fg = '#0000ff'
package_bg = '#727f72'
iced_out_os = '#09ecf8'


[golang]
symbol = 'Óôû '
format = '[\[$symbol($version)\]](fg:package_fg)'

[aws]
format = '[\[$symbol($profile)(\($region\))(\[$duration\])\]](package_fg)'

[bun]
format = '[\[$symbol($version)]\]](package_fg)'

[c]
format = '[\[$symbol($version(-$name))\]](package_fg)'

[cmake]
format = '[\[$symbol($version)\]](package_fg)'

[cmd_duration]
format = '[\[‚è≤ $duration\]](time_fg)'

[container]
symbol = 'Û∞èó'
format = '[\[$symbol \[$name\]](package_fg)'

[cobol]
format = '[\[$symbol($version)\]](package_fg)'

[conda]
format = '[\[$symbol$environment\]](package_fg)'

[crystal]
format = '[\[$symbol($version)\]](package_fg)'

[daml]
format = '[\[$symbol($version)\]](package_fg)'

[dart]
format = '[\[$symbol($version)\]](package_fg)'
[deno]
format = '[\[$symbol($version)\]](package_fg)'

[directory]
style = 'directory_fg'
read_only = 'Ôëñ '
read_only_style = 'char_poobie_fg'
home_symbol = 'Ó¨Ü '

[docker_context]
format = '[\[$symbol$context\]](package_fg)'

[dotnet]
format = '[\[$symbol($version)(üéØ $tfm)\]](package_fg)'

[elixir]
format = '[\[$symbol($version \(OTP $otp_version\))\]](package_fg)'

[elm]
format = '[\[$symbol($version)\]](package_fg)'

[env_var.USER]
format = '[$env_value@](user_fg)'

[erlang]
format = '[\[$symbol($version)\]](package_fg)'

[fennel]
format = '[\[$symbol($version)\]](package_fg)'

[fossil_branch]
format = '[\[$symbol$branch\]](package_fg)'

[gcloud]
format = '[\[$symbol$account(@$domain)(\($region\))\]](package_fg)'

[git_branch]
symbol = 'Ôêò '
format = '[Ó™Ñ \[$symbol$branch\]](char_success_fg)'

[git_commit]
tag_symbol = 'Ôêí '

[git_metrics]
disabled = false
format = '([\[](time_fg)[+$added](char_success_fg)[-$deleted](time_fg)[\] Ó´Ω ](time_fg))'

[git_status]
conflicted = 'Û±Éü '
format = '([\[$all_status$ahead_behind\]](clock_fg))'

[gradle]
format = '[\[$symbol($version)\]](package_fg)'

[guix_shell]
format = '[\[$symbol]\](package_fg)'

[haskell]
format = '[\[$symbol($version)\]](package_fg)'

[haxe]
format = '[\[$symbol($version)\]](package_fg)'

[helm]
format = '[\[$symbol($version)\]](package_fg)'

[hg_branch]
format = '[\[$symbol$branch\]](package_fg)'

[hostname]
ssh_only = false
ssh_symbol = 'Û∞£Ä '
format = '[$hostname($ssh_symbol)Û±ùÜ ](user_fg)'

[java]
format = '[\[$symbol($version)\]](package_fg)'

[julia]
format = '[\[$symbol($version)\]](package_fg)'

[kotlin]
format = '[\[$symbol($version)\]](package_fg)'

[kubernetes]
format = '[\[$symbol$context( \($namespace\))\]](package_fg)'

[lua]
symbol = 'Óò† '
format = '[\[$symbol($version)\]](package_fg)'

# Implement into prompt?
[memory_usage]
threshold = 50
disabled = false
format = '[ Óâ¶ $ram( | $swap)](char_poobie_fg)'

[meson]
format = '[\[$symbol$project\]](package_fg)'

[nim]
format = '[\[$symbol($version)\]](package_fg)'

[nix_shell]
format = '[\[$symbol$state( \($name\))\]](package_fg)'

[nodejs]
format = '[\[$symbol($version)\]](package_fg)'

[ocaml]
format = '[\[$symbol($version)(\($switch_indicator$switch_name\))\]](package_fg)'

[opa]
format = '[\[$symbol($version)\]](package_fg)'

[openstack]
format = '[\[$symbol$cloud(\($project\))\]](package_fg)'

[os]
disabled = false
format = '[$symbol](iced_out_os)'

[os.symbols]
Arch = 'ÔåÉ '

[package]
format = '[\[Û∞èó $version\]](package_fg)'

[perl]
format = '[\[$symbol($version)\]](package_fg)'

[php]
format = '[\[$symbol($version)\]](package_fg)'

[pijul_channel]
format = '[\[$symbol$channel\]](package_fg)'

[pulumi]
format = '[\[$symbol$stack\]](package_fg)'

[purescript]
format = '[\[$symbol($version)\]](package_fg)'

[python]
format = '[\[${symbol}${pyenv_prefix}(${version})(\($virtualenv\))\]](package_fg)'

[raku]
format = '[\[$symbol($version-$vm_version)\]](package_fg)'

[red]
format = '[\[$symbol($version)\]](package_fg)'

[ruby]
format = '[\[$symbol($version)\]](package_fg)'

[rust]
format = '[\[$symbol($version)\]](package_fg)'

[scala]
format = '[\[$symbol($version)\]](package_fg)'

[spack]
format = '[\[$symbol$environment\]](package_fg)'

[sudo]
disabled = false
format = '[Û∞íÉ ](char_poobie_fg)'

[swift]
format = '[\[$symbol($version)\]](package_fg)'

[terraform]
format = '[\[$symbol$workspace\]](package_fg)'

[time]
disabled = false
format = '[[Û∞•î ](clock_fg)$time ](time_fg)'

[vagrant]
format = '[\[$symbol($version)\]](package_fg)'

[vlang]
format = '[\[$symbol($version)\]](package_fg)'

[zig]
format = '[\[$symbol($version)\]](package_fg)'

[solidity]
format = '[\[$symbol($version)\]](package_fg)'
